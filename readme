CYPRIEN CARLOT
VICTOR CAUSSE
JULIAN BIDAULT





IA :
enregistre directement les produits 
supprime les aliments au fur et à mesure de la consommation 
proposition de plats 
analyse de vos préferences
adaptation en fonctions des données rentrées 
temps , allergies , moode , matériels 


https://www.laminutegourmandeparis.com/post/recette-soupe-thai-epicee
https://www.supercook.me/fr/supercook/recipes/category/9/page/4/?search%5Bkeywords_type%5D=keywords&search%5Bterms%5D=&recipe_filters%5Bsearch%5D%5Bkeywords_type%5D=keywords&recipe_filters%5Bsearch%5D%5Bterms%5D=&recipe_filters%5Bcreate_user%5D=&recipe_filters%5Blanguage_filter%5D=120&recipe_filters%5Brecipe_country_id%5D=&recipe_filters%5Brecipe_rating%5D=&recipe_filters%5Bpage%5D%5B4%5D=Suivant&language_filter=120



import sys
import json
from PyQt5.QtWidgets import (QApplication, QWidget, QPushButton, QVBoxLayout, QLineEdit,
                             QLabel, QFormLayout, QMessageBox, QInputDialog,
                             QComboBox, QStackedLayout)
from PyQt5.QtCore import Qt

class UserData:
    def __init__(self):
        self.username = ""
        self.password = ""
        self.ingredients = []

    def save_to_file(self):
        data = {
            "username": self.username,
            "password": self.password,
            "ingredients": self.ingredients
        }
        with open(f"{self.username}_data.json", "w") as f:
            json.dump(data, f)

    def load_from_file(self):
        try:
            with open(f"{self.username}_data.json", "r") as f:
                data = json.load(f)
                self.username = data.get("username", "")
                self.password = data.get("password", "")
                self.ingredients = data.get("ingredients", [])
        except FileNotFoundError:
            pass


user_data = UserData()

class BaseWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setStyleSheet("""
            QWidget {
                background-color: #2d2d2d;
                color: #ffffff;
                font-family: Arial, sans-serif;
                font-size: 16px;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 15px 25px;
                font-size: 16px;
                border-radius: 8px;
                min-width: 300px;
                min-height: 60px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #388e3c;
            }
            QLineEdit {
                background-color: #555;
                color: white;
                border-radius: 5px;
                padding: 10px;
                font-size: 16px;
                min-width: 300px;
            }
            QLabel {
                font-size: 18px;
                padding: 5px;
            }
        """)

class MainWindow(BaseWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Interface Moderne")

        self.setWindowTitle("RECIPEASY")
        self.setGeometry(400, 400, 800, 650)

        self.stack_layout = QStackedLayout()

        self.home_widget = self.create_home_page()
        self.account_widget = AccountCreationPage(self)
        self.login_widget = LoginPage(self)
        self.menu_widget = MenuPage(self)
        self.frigo_widget = FrigoPage(self)

        self.stack_layout.addWidget(self.home_widget)
        self.stack_layout.addWidget(self.account_widget)
        self.stack_layout.addWidget(self.login_widget)
        self.stack_layout.addWidget(self.menu_widget)
        self.stack_layout.addWidget(self.frigo_widget)

        self.setLayout(self.stack_layout)
        self.stack_layout.setCurrentIndex(0)

    def create_home_page(self):
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)

        button1 = QPushButton("Créer un compte")
        button1.clicked.connect(lambda: self.stack_layout.setCurrentIndex(1))

        button2 = QPushButton("Connexion")
        button2.clicked.connect(lambda: self.stack_layout.setCurrentIndex(2))

        layout.addWidget(button1)
        layout.addWidget(button2)

        container = QWidget()
        container.setLayout(layout)
        return container

    def go_to_menu(self):
        self.stack_layout.setCurrentIndex(3)

    def go_to_frigo(self):
        self.frigo_widget.update_ingredients()
        self.stack_layout.setCurrentIndex(4)

class AccountCreationPage(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)

        self.username_input = QLineEdit()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)

        submit_button = QPushButton("Créer le compte")
        submit_button.clicked.connect(self.create_account)

        layout.addWidget(QLabel("Identifiant:"))
        layout.addWidget(self.username_input)
        layout.addWidget(QLabel("Mot de passe:"))
        layout.addWidget(self.password_input)
        layout.addWidget(submit_button)

        self.setLayout(layout)

    def create_account(self):
        user_data.username = self.username_input.text()
        user_data.password = self.password_input.text()
        user_data.save_to_file()
        self.main_window.stack_layout.setCurrentIndex(0)

class LoginPage(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)

        self.username_input = QLineEdit()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)

        login_button = QPushButton("Se connecter")
        login_button.clicked.connect(self.login)

        layout.addWidget(QLabel("Identifiant:"))
        layout.addWidget(self.username_input)
        layout.addWidget(QLabel("Mot de passe:"))
        layout.addWidget(self.password_input)
        layout.addWidget(login_button)

        self.setLayout(layout)

    def login(self):
        user_data.username = self.username_input.text()
        user_data.load_from_file()

        if self.username_input.text() == user_data.username and self.password_input.text() == user_data.password:
            self.main_window.go_to_menu()
        else:
            error_message = QMessageBox()
            error_message.setIcon(QMessageBox.Critical)
            error_message.setText("Identifiant ou mot de passe incorrect!")
            error_message.setWindowTitle("Erreur de connexion")
            error_message.exec_()

class MenuPage(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)

        button1 = QPushButton("Ajouter des ingrédients manuellement")
        button1.clicked.connect(self.add_ingredient)

        button2 = QPushButton("Mon Frigo")
        button2.clicked.connect(self.main_window.go_to_frigo)

        layout.addWidget(button1)
        layout.addWidget(button2)

        self.setLayout(layout)

    def add_ingredient(self):
        ingredient, ok = QInputDialog.getText(self, "Ajouter un ingrédient", "Nom de l'ingrédient:")
        if ok and ingredient:
            quantity, ok1 = QInputDialog.getDouble(self, "Quantité", "Quantité:", decimals=2)
            if ok1:
                units = ["g", "kg", "unités"]
                unit, ok2 = QInputDialog.getItem(self, "Unité", "Unité:", units, 0, False)
                if ok2:
                    user_data.ingredients.append({"name": ingredient, "quantity": quantity, "unit": unit})
                    user_data.save_to_file()

class FrigoPage(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.layout = QVBoxLayout()
        self.layout.setAlignment(Qt.AlignTop)
        self.setLayout(self.layout)

    def update_ingredients(self):
        for i in reversed(range(self.layout.count())):
            widget = self.layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        self.layout.addWidget(QLabel("Ingrédients dans mon frigo:"))
        for ingredient in user_data.ingredients:
            label = QLabel(f"{ingredient['name']} ({ingredient['quantity']} {ingredient['unit']})")
            self.layout.addWidget(label)

        back_button = QPushButton("Retour au menu")
        back_button.clicked.connect(self.main_window.go_to_menu)
        self.layout.addWidget(back_button)

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
