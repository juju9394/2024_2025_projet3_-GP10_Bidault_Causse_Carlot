import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QLineEdit, QLabel, QFormLayout
from PyQt5.QtCore import Qt

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Interface Moderne")
        self.setGeometry(100, 100, 400, 300)

        # Définir le style global
        self.setStyleSheet("""
            QWidget {
                background-color: #2d2d2d;
                color: #ffffff;
                font-family: Arial, sans-serif;
                font-size: 16px;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px;
                font-size: 14px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #388e3c;
            }
        """)

        # Layout principal pour les boutons
        self.layout = QVBoxLayout()
        self.layout.setAlignment(Qt.AlignCenter)

        # Boutons de la page d'accueil
        self.button1 = QPushButton("Créé un compte", self)
        self.button1.setFixedSize(300, 75)
        self.button1.clicked.connect(self.on_click_button1)

        self.button2 = QPushButton("Connexion", self)
        self.button2.setFixedSize(300, 75)
        self.button2.clicked.connect(self.on_click_button2)

        # Ajouter les boutons à l'interface principale
        self.layout.addWidget(self.button1)
        self.layout.addWidget(self.button2)

        self.setLayout(self.layout)

    def on_click_button1(self):
        print("Le bouton 'Cliquez ici' a été cliqué!")

    def on_click_button2(self):
        # Masquer les boutons d'origine (les cacher)
        self.button1.hide()
        self.button2.hide()

        # Créer et afficher les nouveaux boutons de connexion
        self.login_button = QPushButton("Se connecter", self)
        self.login_button.setFixedSize(300, 75)
        self.login_button.clicked.connect(self.on_login_click)

        self.register_button = QPushButton("Créer un compte", self)
        self.register_button.setFixedSize(300, 75)
        self.register_button.clicked.connect(self.on_register_click)

        # Ajouter les nouveaux boutons à l'interface
        self.layout.addWidget(self.login_button)
        self.layout.addWidget(self.register_button)

    def on_login_click(self):
        print("Connexion réussie!")

    def on_register_click(self):
        # Lorsqu'on clique sur "Créer un compte", on ouvre la fenêtre de création de compte
        self.account_window = AccountCreationWindow()
        self.account_window.show()

class AccountCreationWindow(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Créer un compte")
        self.setGeometry(100, 100, 400, 250)

        # Création des widgets pour l'interface de création de compte
        self.username_label = QLabel("Identifiant:")
        self.username_input = QLineEdit(self)

        self.password_label = QLabel("Mot de passe:")
        self.password_input = QLineEdit(self)
        self.password_input.setEchoMode(QLineEdit.Password)  # Pour masquer le mot de passe
# Ajouter le bouton Retour
        self.back_button = QPushButton("Retour", self)
        self.back_button.setFixedSize(300, 75)
        self.back_button.clicked.connect(self.on_back_click)

        # Création d'un bouton pour valider la création du compte
        self.submit_button = QPushButton("Créer le compte", self)
        self.submit_button.clicked.connect(self.create_account)

        # Layout pour organiser les éléments
        form_layout = QFormLayout()
        form_layout.addRow(self.username_label, self.username_input)
        form_layout.addRow(self.password_label, self.password_input)
        form_layout.addRow(self.submit_button)

        self.setLayout(form_layout)

    def create_account(self):
        username = self.username_input.text()
        password = self.password_input.text()

        print(f"Compte créé avec l'identifiant: {username} et le mot de passe: {password}")
        self.close()  # Fermer la fenêtre après la soumission

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
